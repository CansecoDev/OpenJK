name: build

on:
  # Run on pushes to tags, the "master" branch, and PR's
  push:
    tags-ignore:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  pull_request:
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'

  workflow_dispatch:

jobs:
  #  windows-msys: #todo fix mingw building
  #    name: ${{ matrix.config }} Windows ${{ matrix.arch }}
  #    runs-on: windows-2019
  #    strategy:
  #      fail-fast: false
  #     matrix:
  #        arch: [ x86, x86_64 ]
  #        cc: [ gcc ]
  #        config: [ Release ]
  #        include:
  #          - arch: x86
  #            msystem: MINGW32
  #            prefix: mingw-w64-i686
  #
  #          - arch: x86_64
  #            msystem: MINGW64
  #            prefix: mingw-w64-x86_64
  #
  #          - config: Release
  #            rule: install
  #
  #    defaults:
  #      run:
  #        shell: msys2 {0}
  #
  #    steps:
  #      - uses: msys2/setup-msys2@v2
  #        with:
  #          install: ${{ matrix.prefix }}-binutils ${{ matrix.prefix }}-make ${{ matrix.prefix }}-${{ matrix.cc }}
  #          msystem: ${{ matrix.msystem }}
  #          path-type: minimal
  #          release: false
  #          update: false
  #
  #      - uses: actions/checkout@v2
  #        with:
  #          submodules: recursive
  #
  #      - name: Build
  #        run: |
  #          make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin USE_SDL=0 USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=vulkan CNAME=quake3e-vulkan BUILD_SERVER=0
  #          make clean ARCH=${{ matrix.arch }}
  #          make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin USE_SDL=0 USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=opengl
  #      - uses: actions/upload-artifact@v2
  #        if: matrix.cc == 'gcc' && matrix.config == 'Release'
  #        with:
  #          name: windows-mingw-${{ matrix.arch }}
  #          path: bin
  #          if-no-files-found: error
  #          retention-days: 5

  vs2019:
    name: ${{ matrix.build_type }} Windows ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      matrix:
        build_type: [Release]
        # arch: [arm64, x86, x64]
        # arch: [ x86, x64 ]
        arch: [x86]
        include:
          # - arch: arm64 # todo fix arm64 building
          #  platform: ARM64
          #  suffix: .arm64
          #  pkg_suffix: arm64

          - arch: x86
            platform: Win32
            pkg_suffix: x86

          # - arch: x64
          #  platform: x64
          #  suffix: .x64
          #  pkg_suffix: x64

    steps:
      - uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -A ${{ matrix.platform }} -DCMAKE_INSTALL_PREFIX=bin

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install . --config ${{ matrix.build_type }}

      - uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.arch }}
          path: ${{runner.workspace}}/build/bin
          if-no-files-found: error

  ubuntu-x86:
    name: ${{ matrix.config }} Ubuntu ${{ matrix.arch }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64] # [x86, x86_64] disable 32-bit builds as there is some dependency error at the moment with them
        cc: [gcc]
        cxx: [g++]
        config: [Release]
        include:
          - config: Release
            rule: install
          # - arch: x86
          #   use_sdl: true
          - arch: x86_64
            use_sdl: true

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: |
          if [ ${{ matrix.arch }} == "x86" ]; then
            sudo dpkg --add-architecture i386
            sudo apt-get -qq update
            sudo apt-get -y install gcc-multilib g++-multilib ninja-build
            sudo apt-get -y install --allow-downgrades libpcre2-8-0=10.34-7 libglib2.0-dev:i386 libjpeg-dev:i386 libpng-dev:i386 libsdl2-dev:i386 libcurl4-openssl-dev:i386
          else
            sudo apt-get -qq update
            sudo apt-get install libjpeg-dev libpng-dev zlib1g-dev libsdl2-dev
          fi
          cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          if [ ${{ matrix.arch }} == "x86" ]; then
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBuildDiscordRichPresence=OFF -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install -DCMAKE_TOOLCHAIN_FILE=CMakeModules/Toolchains/linux-i686.cmake
          else
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBuildDiscordRichPresence=OFF -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install
          fi
      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build .

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install .

      - name: Create binary archive
        working-directory: ${{runner.workspace}}/install/JediAcademy
        shell: bash
        run: |
          if [ ${{ matrix.arch }} == "x86" ]; then
          chmod +x eternaljk.i386
          else
          chmod +x eternaljk.${{ matrix.arch }}  
          fi
          tar -cvf EternalJK-linux-${{ matrix.arch }}.tar      *
      - uses: actions/upload-artifact@v2
        if: matrix.cc == 'gcc' && matrix.config == 'Release'
        with:
          name: linux-${{ matrix.arch }}
          path: ${{runner.workspace}}/install/JediAcademy/EternalJK-linux-${{ matrix.arch }}.tar
          if-no-files-found: error

  macos-x86:
    name: ${{ matrix.config }} macOS ${{ matrix.arch }}
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        cc: [clang]
        cxx: [clang++]
        config: [Release]
        include:
          - config: Release
            rule: install

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: |
          brew install zlib libjpeg libpng sdl2
          cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DBuildDiscordRichPresence=OFF -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build .

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install .

      - name: Create binary archive
        working-directory: ${{runner.workspace}}/install/JediAcademy
        shell: bash
        run: |
          chmod +x eternaljk.x86_64.app/Contents/MacOS/eternaljk.x86_64
          tar -cvf EternalJK-macos-${{ matrix.arch }}.tar      *
      - uses: actions/upload-artifact@v2
        if: matrix.cc == 'clang' && matrix.config == 'Release'
        with:
          name: macos-${{ matrix.arch }}
          path: ${{runner.workspace}}/install/JediAcademy/EternalJK-macos-${{ matrix.arch }}.tar
          if-no-files-found: error

  create-testing:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [vs2019, ubuntu-x86, macos-x86]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create binary archives
        run: |
          # 7z a -r EternalJK-linux-x86.zip         ./linux-x86/*
          7z a -r EternalJK-linux-x86_64.zip      ./linux-x86_64/*
          7z a -r EternalJK-windows-x86.zip       ./windows-x86/JediAcademy/*
          # 7z a -r EternalJK-windows-x84_64.zip    ./windows-x64/JediAcademy/*
          7z a -r EternalJK-macos-x86_64.zip      ./macos-x86_64/*
      - name: Create latest build
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: Latest Build
          files: |
            *.zip