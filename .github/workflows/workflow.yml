name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - uploadartifacts
  pull_request:
    branches:
      - master

jobs:
  vs2019:
    name: Build VS 2019, ${{ matrix.build_type }}, ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo]
        arch: [Win32, x64]

    steps:
      - uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -A ${{ matrix.arch }}

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install .

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.config == 'RelWithDebInfo' }}
        with:
          name: windows-msvc-${{ matrix.pkg_suffix }}
          path: bin
          if-no-files-found: error

  vs2017_xp:
    name: Build VS 2017, Windows XP
    runs-on: windows-2016

    steps:
      - uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -A Win32 -T v141_xp

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config RelWithDebInfo

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install .

  macos:
    name: Build macOS AppleClang
    runs-on: macos-10.15

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: |
          brew install zlib libjpeg libpng sdl2
          cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBuildDiscordRichPresence=OFF

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build .

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install .

      - uses: actions/upload-artifact@v2
        if: matrix.cc == 'clang' && matrix.config == 'RelWithDebInfo'
        with:
          name: macos-${{ matrix.arch }}
          path: bin
          if-no-files-found: error


  linux:
    name: Build Linux, ${{ matrix.build_type }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo]

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install libjpeg-dev libpng-dev zlib1g-dev libsdl2-dev
          cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBuildDiscordRichPresence=OFF -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/build/install

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build .

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install .

      - uses: actions/upload-artifact@v2
        if: matrix.cc == 'gcc' && matrix.config == 'RelWithDebInfo'
        with:
          name: linux-${{ matrix.arch }}
          path: bin
          if-no-files-found: error

  create-testing:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [vs2019, macos, linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create binary archives
        run: |
          7z a -r EternalJK-linux.zip          ./linux-x86/*
          7z a -r EternalJK-windows-x86.zip    ./windows-x86/*
          7z a -r EternalJK-windows-x86_64.zip ./windows-x86_64/*
          7z a -r EternalJK-macos-x86_64.zip   ./macos-x86_64/*


      - name: Create latest build
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: Latest Build
          files: |
            *.zip
  update-release:
    if: ${{ github.event_name == 'release' }}
    needs: [vs2019, macos, linux]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - artifacts: ./linux-x86/*
            artifact_name: oDFe-linux-x86.zip

          - artifacts: ./linux-x86_64/*
            artifact_name: oDFe-linux-x86_64.zip

          - artifacts: ./windows-mingw-x86/*
            artifact_name: oDFe-windows-x86.zip

          - artifacts: ./windows-mingw-x86_64/*
            artifact_name: oDFe-windows-x86_64.zip

          - artifacts: ./macos-x86_64/*
            artifact_name: oDFe-macos-x86_64.zip

          - artifacts: windows-msvc-x86/ windows-msvc-x86_64/ windows-msvc-arm64/ # linux-aarch64/ linux-armv7/
            artifact_name: oDFe-other.zip

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create archive
        run: 7z a -r ${{ matrix.artifact_name }} ${{ matrix.artifacts }}

      - name: Upload archive
        uses: "svenstaro/upload-release-action@v2"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file: ${{ matrix.artifact_name }}