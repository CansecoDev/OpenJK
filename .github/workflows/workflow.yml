name: Build

on:
  workflow_dispatch:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  vs2019:
    name: Build VS 2019, ${{ matrix.build_type }}, ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo]
        arch: [Win32, x64]

    steps:
    - uses: actions/checkout@v2

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -A ${{ matrix.arch }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }}

    - uses: actions/upload-artifact@v2
      if: ${{ matrix.config == 'RelWithDebInfo' }}
      with:
        name: windows-${{ matrix.pkg_suffix }}
        path: bin
        if-no-files-found: error
        retention-days: 5

  vs2017_xp:
    name: Build VS 2017, Windows XP
    runs-on: windows-2016

    steps:
    - uses: actions/checkout@v2

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -A Win32 -T v141_xp

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config RelWithDebInfo

  macos:
    name: Build macOS AppleClang
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: |
        brew install zlib libjpeg libpng sdl2
        cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBuildDiscordRichPresence=OFF

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build .

    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'clang' && matrix.config == 'RelWithDebInfo'
      with:
        name: macos-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5
  linux:
    name: Build Linux, ${{ matrix.build_type }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo]

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install libjpeg-dev libpng-dev zlib1g-dev libsdl2-dev
        cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBuildDiscordRichPresence=OFF

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build .

    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'gcc' && matrix.config == 'RelWithDebInfo'
      with:
        name: linux-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5

  create-testing:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [vs2019, vs2017_xp, macos, linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create binary archives
        run: |
          7z a -r eternaljk-linux-x86.zip            ./linux-x86/*
          7z a -r eternaljk-linux-x86_64.zip         ./linux-x86_64/*
          7z a -r eternaljk-macos-x86_64.zip         ./macos-x86_64/*

      - name: Create latest build
        uses: ec-/action-automatic-releases@test
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: Latest Build
          files: |
            *.zip
  update-release:
    if: ${{ github.event_name == 'release' }}
    needs: [vs2019, vs2017_xp, macos, linux]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - artifact_dir: linux-x86
            artifact_name: eternaljk-linux-x86.zip

          - artifact_dir: linux-x86_64
            artifact_name: eternaljk-linux-x86_64.zip

          - artifact_dir: windows-x86
            artifact_name: eternaljk-windows-msvc-x86.zip

          - artifact_dir: windows-x86_64
            artifact_name: eternaljk-windows-msvc-x86_64.zip

          - artifact_dir: macos-x86_64
            artifact_name: eternaljk-macos-x86_64.zip

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create archive
        run: 7z a -r ${{ matrix.artifact_name }} ./${{ matrix.artifact_dir }}/*

      - name: Upload archive
        uses: "svenstaro/upload-release-action@v2"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file: ${{ matrix.artifact_name }}